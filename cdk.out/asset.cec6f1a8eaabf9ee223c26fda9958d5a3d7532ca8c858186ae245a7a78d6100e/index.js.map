{
  "version": 3,
  "sources": ["../lambda/index.ts", "../lambda/db.ts", "../lambda/redirect.ts"],
  "sourcesContent": ["export { handler as redirectHandler } from \"./redirect\";\n", "const { DynamoDB } = require(\"aws-sdk\");\n\nconst dynamoDB = new DynamoDB.DocumentClient({\n  params: {\n    TableName: \"UrlsTable\",\n  },\n});\n\ninterface ITracking {\n  code: string;\n  tracking: {\n    ua: string;\n    platform: string;\n    isDesktop?: string;\n    isMobile?: string;\n    isTablet?: string;\n    isSmartTV?: string;\n    country: string;\n  };\n}\n\nconst addDestination = async (\n  code: string,\n  destination: string,\n  project: string\n) => {\n  return dynamoDB\n    .update({\n      TableName: \"UrlsTable\",\n      Key: {\n        pk: code,\n      },\n      ConditionExpression: \"attribute_not_exists(#pk)\",\n      UpdateExpression:\n        \"SET #longUrl = :longUrl, #hits = :hits, #project = :project\",\n      ExpressionAttributeNames: {\n        \"#longUrl\": \"longUrl\",\n        \"#hits\": \"hits\",\n        \"#project\": \"project\",\n        \"#pk\": \"pk\",\n      },\n      ExpressionAttributeValues: {\n        \":longUrl\": destination,\n        \":project\": project,\n        \":hits\": 0,\n      },\n      ReturnConsumedCapacity: \"NONE\",\n      ReturnValues: \"ALL_NEW\",\n    })\n    .promise()\n    .then((data: any) => {\n      console.info({\n        event: \"AddDestination\",\n        targetAdded: data.Attributes.longUrl,\n        projectAdded: data.Attributes.hits,\n        createdAt: new Date().toISOString(),\n      });\n      return data.Attributes;\n    })\n    .catch((err: any) => {\n      console.error({\n        event: \"UpdateError\",\n        target: code,\n        value: err.code,\n        updatedAt: new Date().toISOString(),\n        payload: err,\n      });\n      console.error(err);\n    });\n};\n\nconst getDestination = async (code: string) => {\n  return dynamoDB\n    .get({\n      Key: {\n        pk: code,\n      },\n      ProjectionExpression: \"longUrl\",\n    })\n    .promise()\n    .then((data: any) => {\n      console.log(data);\n      return data?.Item?.longUrl ?? null;\n    })\n    .catch((err: any) => {\n      console.error({\n        event: \"GetDestination\",\n        target: code,\n        value: err.code,\n        retrievedAt: new Date().toISOString(),\n        payload: err,\n      });\n      return err.code;\n    });\n};\n\nconst updateHits = async (props: ITracking) => {\n  return dynamoDB\n    .update({\n      Key: {\n        pk: props.code,\n      },\n      UpdateExpression: \"SET #hits = #hits + :hits_inc, #tracking = :tracking\",\n      ExpressionAttributeNames: {\n        \"#hits\": \"hits\",\n        \"#tracking\": \"tracking\",\n      },\n      ExpressionAttributeValues: {\n        \":hits_inc\": 1,\n        \":tracking\": {\n          ua: props.tracking.ua,\n          platform: props.tracking.platform,\n          country: props.tracking.country,\n        },\n      },\n      ReturnConsumedCapacity: \"NONE\",\n      ReturnValues: \"ALL_NEW\",\n    })\n    .promise()\n    .then((data: any) => {\n      console.info({\n        event: \"UpdateHits\",\n        destination: data.Attributes.longUrl,\n        value: data.Attributes.hits,\n        updatedAt: new Date().toISOString(),\n      });\n      return data.Attributes;\n    })\n    .catch((err: any) => {\n      console.error({\n        event: \"UpdateError\",\n        code: props.code,\n        value: err.code,\n        updatedAt: new Date().toISOString(),\n        payload: err,\n      });\n      return err.code;\n    });\n};\n\nexport { addDestination, getDestination, updateHits };\n", "//const AWS = require(\"aws-sdk\");\n\nimport { Handler } from \"aws-lambda\";\nimport { getDestination, updateHits } from \"./db\";\n\nexport const handler: Handler = async event => {\n  let response;\n\n  const responseFallback = (response = {\n    statusCode: 301,\n    headers: {\n      Location: \"https://ibrahimcesar.cloud\",\n    },\n  });\n\n  if (event.httpMethod !== \"GET\") {\n    response = {\n      statusCode: 501,\n    };\n  }\n\n  try {\n    const hasMapped = await getDestination(event.path);\n    if (hasMapped) {\n      await updateHits({\n        code: hasMapped,\n        tracking: {\n          ua: event.headers[\"sec-ch-ua\"],\n          platform: event.headers[\"sec-ch-ua-platform\"],\n          country: event.headers[\"CloudFront-Viewer-Country\"],\n        },\n      });\n      response = {\n        statusCode: 301,\n        headers: {\n          Location: hasMapped,\n        },\n      };\n    } else {\n      response = responseFallback;\n    }\n  } catch (err) {\n    console.error(err);\n    response = responseFallback;\n  }\n\n  return response;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,EAAE,aAAa,QAAQ;AAE7B,IAAM,WAAW,IAAI,SAAS,eAAe;AAAA,EAC3C,QAAQ;AAAA,IACN,WAAW;AAAA;AAAA;AAmEf,IAAM,iBAAiB,OAAO,SAAiB;AAC7C,SAAO,SACJ,IAAI;AAAA,IACH,KAAK;AAAA,MACH,IAAI;AAAA;AAAA,IAEN,sBAAsB;AAAA,KAEvB,UACA,KAAK,CAAC,SAAc;AAhFzB;AAiFM,YAAQ,IAAI;AACZ,WAAO,oCAAM,SAAN,mBAAY,YAAW;AAAA,KAE/B,MAAM,CAAC,QAAa;AACnB,YAAQ,MAAM;AAAA,MACZ,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO,IAAI;AAAA,MACX,aAAa,IAAI,OAAO;AAAA,MACxB,SAAS;AAAA;AAEX,WAAO,IAAI;AAAA;AAAA;AAIjB,IAAM,aAAa,OAAO,UAAqB;AAC7C,SAAO,SACJ,OAAO;AAAA,IACN,KAAK;AAAA,MACH,IAAI,MAAM;AAAA;AAAA,IAEZ,kBAAkB;AAAA,IAClB,0BAA0B;AAAA,MACxB,SAAS;AAAA,MACT,aAAa;AAAA;AAAA,IAEf,2BAA2B;AAAA,MACzB,aAAa;AAAA,MACb,aAAa;AAAA,QACX,IAAI,MAAM,SAAS;AAAA,QACnB,UAAU,MAAM,SAAS;AAAA,QACzB,SAAS,MAAM,SAAS;AAAA;AAAA;AAAA,IAG5B,wBAAwB;AAAA,IACxB,cAAc;AAAA,KAEf,UACA,KAAK,CAAC,SAAc;AACnB,YAAQ,KAAK;AAAA,MACX,OAAO;AAAA,MACP,aAAa,KAAK,WAAW;AAAA,MAC7B,OAAO,KAAK,WAAW;AAAA,MACvB,WAAW,IAAI,OAAO;AAAA;AAExB,WAAO,KAAK;AAAA,KAEb,MAAM,CAAC,QAAa;AACnB,YAAQ,MAAM;AAAA,MACZ,OAAO;AAAA,MACP,MAAM,MAAM;AAAA,MACZ,OAAO,IAAI;AAAA,MACX,WAAW,IAAI,OAAO;AAAA,MACtB,SAAS;AAAA;AAEX,WAAO,IAAI;AAAA;AAAA;;;ACnIV,IAAM,UAAmB,OAAM,UAAS;AAC7C,MAAI;AAEJ,QAAM,mBAAoB,WAAW;AAAA,IACnC,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,UAAU;AAAA;AAAA;AAId,MAAI,MAAM,eAAe,OAAO;AAC9B,eAAW;AAAA,MACT,YAAY;AAAA;AAAA;AAIhB,MAAI;AACF,UAAM,YAAY,MAAM,eAAe,MAAM;AAC7C,QAAI,WAAW;AACb,YAAM,WAAW;AAAA,QACf,MAAM;AAAA,QACN,UAAU;AAAA,UACR,IAAI,MAAM,QAAQ;AAAA,UAClB,UAAU,MAAM,QAAQ;AAAA,UACxB,SAAS,MAAM,QAAQ;AAAA;AAAA;AAG3B,iBAAW;AAAA,QACT,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,UAAU;AAAA;AAAA;AAAA,WAGT;AACL,iBAAW;AAAA;AAAA,WAEN,KAAP;AACA,YAAQ,MAAM;AACd,eAAW;AAAA;AAGb,SAAO;AAAA;",
  "names": []
}
